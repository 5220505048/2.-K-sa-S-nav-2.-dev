#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MAX_ITER 100
#define EPSILON 0.0001

// Gauss karışım modelinin ana işlevi
void gaussKarışımModeli(double *veri, int n, int k, double *ortalama, double *varyans, double *pi, double *sonuc) {
    int i, j, iterasyon;
    double *yedekOrtalama = (double*) malloc(k * sizeof(double));
    double *yedekVaryans = (double*) malloc(k * sizeof(double));
    double *olasilik = (double*) malloc(k * sizeof(double));
    double *temp = (double*) malloc(n * k * sizeof(double));

    // Başlangıç değerlerini rastgele seç
    for (i = 0; i < k; i++) {
        ortalama[i] = veri[rand() % n];
        varyans[i] = 1.0;
        pi[i] = 1.0 / k;
    }

    // Gauss karışım modeli için iterasyonları gerçekleştir
    for (iterasyon = 0; iterasyon < MAX_ITER; iterasyon++) {
        // Eşleme adımı
        for (i = 0; i < n; i++) {
            double normalizasyon = 0.0;
            for (j = 0; j < k; j++) {
                temp[i * k + j] = pi[j] * exp(-0.5 * pow((veri[i] - ortalama[j]) / varyans[j], 2));
                normalizasyon += temp[i * k + j];
            }
            for (j = 0; j < k; j++) {
                temp[i * k + j] /= normalizasyon;
            }
        }

        // Maksimum olabilirlik adımı
        for (j = 0; j < k; j++) {
            double normalizasyon = 0.0;
            double tempOrtalama = 0.0;
            double tempVaryans = 0.0;
            for (i = 0; i < n; i++) {
                normalizasyon += temp[i * k + j];
                tempOrtalama += temp[i * k + j] * veri[i];
            }
            ortalama[j] = tempOrtalama / normalizasyon;
            for (i = 0; i < n; i++) {
                tempVaryans += temp[i * k + j] * pow(veri[i] - ortalama[j], 2);
            }
            varyans[j] = tempVaryans / normalizasyon;
            olasilik[j] = normalizasyon / n;
        }

        // Yakınsama kontrolü
        double toplamHata = 0.0;
        for (i = 0; i < k; i++) {
            toplamHata += fabs(ortalama[i] - yedekOrtalama[i]);
            toplamHata += fabs(varyans[i] - yedekVaryans[i]);
